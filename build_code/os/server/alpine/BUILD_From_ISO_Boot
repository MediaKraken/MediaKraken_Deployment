# this is for dev purposes now
# to create the server follow instructions in Meta-Man.Build

present 16gb lun
boot from alpine linux 3.2.3 x64 Vanilla iso
install to hd selecting lvmsys

# update the system
apk update
apk upgrade


# add user
adduser metaman
su -
cd /home/metaman


# install deps
apk add tzdata readline-dev tcl-dev libxml2-dev git cython-dev nano yasm cmake autoconf automake bash gettext-dev freetype-dev py-openssl libtool postgresql-dev py-setuptools build-base alpine-sdk linux-headers py-six libffi-dev py-crypto py-pip nfs-utils cifs-utils py-curl nginx ack py-redis redis net-snmp-dev libxslt-dev python-dev py-setuptools uwsgi uwsgi-python uwsgi-router_uwsgi


# if in vmware
apk add open-vm-tools
rc-update add open-vm-tools


# setup startup
rc-update add nfsmount
rc-update add postgresql
rc-update add nginx
rc-update add redis


# grab metaman code
mkdir /home/metaman/github
cd /home/metaman/github
git clone https://github.com/Meta-Man/Meta-Man.Build
git clone https://github.com/Meta-Man/Meta-Man.Common
git clone https://github.com/Meta-Man/Meta-Man.Server


# as root
/etc/init.d/postgresql start
su postgres
# create db for metaman
psql
CREATE USER metamanpg WITH PASSWORD 'metamanpg';
CREATE DATABASE metamandb OWNER metamanpg;
\q

exit


# setup access for remote admin (not required)
sudo nano /var/lib/postgresql/9.4/data/postgresql.conf
add "listen_addresses = '*'"
sudo nano /var/lib/postgresql/9.4/data/pg_hba.conf
# add host line for remote access (not required)
service postgresql restart


# setup pip installs
# as root
pip install --upgrade pip
cd /home/metaman/github/Meta-Man.Build/build_deployment_scripts
pip install -r pip_packages_alpine.txt
sudo pip install requests[security] --upgrade


# as root again to build newer psutils
cd /home/metaman/github/Meta-Man.Build/lib
tar -xvzf psutil*
cd psutil-4.3.0
python setup.py install

cd /home/metaman/github/Meta-Man.Build/lib
unzip isoparser-master.zip
cd isoparser-master
python setup.py install

cd /home/metaman/github/Meta-Man.Build/lib
tar -xvzf ip2c*
cd ip2c*
python setup.py install

cd /home/metaman/github/Meta-Man.Build/lib
tar -xvzf pythonfutures*
cd pythonfutures-3.0.5
python setup.py install

# setup the uwsgi and nginx settings
nano /etc/nginx/nginx.conf
uncomment - gzip on

# kick up worker threads to 2
- replace server with this
'''
server {
    root /home/metaman/github/MediaKraken_Deployment/web_app;
    listen      80;
    server_name localhost;
    charset     utf-8;
    client_max_body_size 75M;
    access_log /var/log/nginx/mediakraken.net_access.log;
    error_log /var/log/nginx/mediakraken.net_error.log;

    location  /static {
      alias  /home/metaman/github/MediaKraken_Deployment/web_app/MediaKraken/;
    }

    location / {
        include uwsgi_params;
        uwsgi_pass unix:/var/mediakraken_uwsgi.sock;
    }
}
'''

# copy the plugin
to get uwsti to work had to copy the cp /usr/lib/uwsgi/python_plugin.so /home/metaman/github/Meta-Man.Server/.


# build ffmpeg libs
mkdir /root/ffmpeg_build
mkdir /root/ffmpeg_sources


run ./FFMPEG_Build_Alpine.sh in Meta-Man.Build/scripts to build ffmpeg with codecs
cp /root/bin/* /usr/local/bin/.




# from prod pg host to copy/import database
# from HOST db to Client db
su postgresl
pg_dump metamandb | psql -h 10.0.0.x metamandb

run script to create db schema

mount up file system with nfsvers=3


cd /root
mv github /home/metman/.
mkdir /home/metaman/github/pid
### touch /var/metaman_uwsgi.sock
reboot for clean nginx, etc

# mount up FS then
mount 10.x.0.x:/storage_pool/iscsi_share/HTPC_MediaBrowser /home/spoot/nfsmount -o nfsvers=3
ln -s /home/spoot/nfsmount/HTPC_MetaData/images /home/metaman/github/Meta-Man.Server/web_app/MetaMan/static/meta/images

# for testing the web portion alone
uwsgi --socket 0.0.0.0:8080 --protocol http --chdir=./web_app --ini ./web_app/metaman_uwsgi.ini
