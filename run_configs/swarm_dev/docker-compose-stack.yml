version: '3.6'
# Volumes are HOST directory and then CONTAINER directory

services:
  # Main app server
  appserver:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkserver:dev
    environment:
      # will init swarmip on server start, if specified
      - SWARMIP=${SWARMIP}
    secrets:
      - db_password
      - secure_key
    entrypoint: ./wait-for-it-ash-busybox130.sh -h mkstack_pgbouncer -p 6432 -t 120 -- python3 main_server.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      # server will generate ssl key for use by web/nginx
      - mediakraken_vol_certs:/mediakraken/key
      # if swarmip init
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # so can read the device scan output
      - mediakraken_vol_devices:/mediakraken/devices
      # server will generate salt/key
      - /var/opt/mediakraken/secure:/mediakraken/secure
    networks:
      - mediakraken_network_backend
    deploy:
      placement:
        constraints: [node.role == manager]

#  # start broadcast server (so clients can find server)
#  broadcast:
#    image: th-registry-1.beaverbay.local:5000/mediakraken/mkbroadcast:dev
#    environment:
#      # so it knows what ip to broadcast on
#      - SWARMIP=${SWARMIP}
#      - HOST_IP=${HOST_IP}
#    entrypoint: python3 subprogram_broadcast.py
#    stop_grace_period: 30s
#    stop_signal: SIGUSR1
#    ports:
#      - target: 9101
#        published: 9101
#        protocol: tcp
#        mode: host
#    volumes:
#      # needs socket for running image list
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#    # needs to run as host so clients can see it on their subnet
#    networks:
#      - mediakraken_outside
#    deploy:
#      placement:
#        constraints: [node.role == manager]

  # runs cron
  cron:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkcron:dev
    secrets:
      - db_password
    entrypoint: ./wait-for-it-ash-busybox130.sh -h mkstack_pgbouncer -p 6432 -t 120 -- python3 subprogram_cron_checker.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    networks:
      - mediakraken_network_backend

  # Postgresql server
  database:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:dev
    environment:
      - MAX_CONNECTIONS=100
      - MAX_WAL_SENDERS=10
      - SHARED_BUFFERS=4096MB
      - WORK_MEM=256MB
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    command: postgres -c logging_collector=on -c log_destination=stderr -c log_min_duration_statement=0 -c log_connections=off -c log_disconnections=off
    secrets:
      - db_password
    stop_grace_period: 30s
    stop_signal: SIGTERM
    deploy:
      placement:
        constraints: [node.role == manager]
    volumes:
      - mediakraken_vol_postgresql:/var/lib/postgresql/data
    networks:
      - mediakraken_network_backend

  #  # Postgresql server
  #  database:
  #    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:dev
  #    environment:
  #      - PGHOST=/tmp
  #      - MAX_CONNECTIONS=20
  #      - MAX_WAL_SENDERS=10
  #      - PG_MODE=primary
  #      - PG_PRIMARY_USER=${DBUSER}
  #      - PG_PRIMARY_PASSWORD=${DBPASS}
  #      - PG_ROOT_PASSWORD=${DBPASS}
  #      - PG_PRIMARY_PORT=5432
  #      - POSTGRES_DB=${DBDATABASE}
  #      - POSTGRES_USER=${DBUSER}
  #      - POSTGRES_PASSWORD=${DBPASS}
  #    stop_grace_period: 30s
  #    stop_signal: SIGTERM
  #    networks:
  #      - mediakraken_network_backend
  #    deploy:
  #      placement:
  #        constraints:
  #        - node.labels.type == primary
  #        - node.role == worker
  #
  #  # Postgresql server replica
  #  database-replica:
  #    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:dev
  #    environment:
  #      - PGHOST=/tmp
  #      - MAX_CONNECTIONS=20
  #      - MAX_WAL_SENDERS=10
  #      - PG_MODE=replica
  #      - PG_PRIMARY_HOST=database
  #      - PG_PRIMARY_PORT=5432
  #      - PG_PRIMARY_USER=${DBUSER}
  #      - PG_PRIMARY_PASSWORD=${DBPASS}
  #      - PG_ROOT_PASSWORD=${DBPASS}
  #      - POSTGRES_DB=${DBDATABASE}
  #      - POSTGRES_USER=${DBUSER}
  #      - POSTGRES_PASSWORD=${DBPASS}
  #    stop_grace_period: 30s
  #    stop_signal: SIGTERM
  #    networks:
  #      - mediakraken_network_backend
  #    deploy:
  #      placement:
  #        constraints:
  #        - node.labels.type != primary
  #        - node.role == worker

  # Runs the download services
  download:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdownload:dev
    secrets:
      - db_password
    entrypoint: ./wait-for-it-ash-busybox130.sh -h mkstack_pgbouncer -p 6432 -t 120 -- python3 main_download.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./data/download:/mediakraken/download
    networks:
      - mediakraken_network_backend
    deploy:
      placement:
        constraints: [node.role == manager]

  filebeat:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkfilebeat:dev
    environment:
      - ELASTICSEARCH_HOSTS=th-elk-1:9200
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      mode: global

  # runs ffprobe
  ffprobe:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkffprobe:dev
    secrets:
      - db_password
    entrypoint: ./wait-for-it-ash-busybox130.sh -h mkstack_pgbouncer -p 6432 -t 120 -- python3 subprogram_ffprobe_metadata.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt:ro
    networks:
      - mediakraken_network_backend

  # runs hardware
  hardware:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkhardware:dev
    volumes:
      # this stores the "push button" key
      - mediakraken_vol_phue:/mediakraken/phue
    entrypoint: python3 main_hardware.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    networks:
      - mediakraken_network_backend
    deploy:
      placement:
        constraints: [node.role == manager]

#  logspout:
#    image: th-registry-1.beaverbay.local:5000/mediakraken/mklogspout:dev
#    environment:
#      ROUTE_URIS: 'syslog+tcp://th-elk-1:5000'
#      LOGSTASH_FIELDS: 'environment=production'
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#    deploy:
#      mode: global

#  mbrainz:
#    image: th-registry-1.beaverbay.local:5000/mediakraken/mkmusicbrainz:dev
#    environment:
#      - BRAINZCODE=/run/secrets/musicbrainz_code
#    secrets:
#      - musicbrainz_code
#    ports:
#      - "5000:5000"
#    volumes:
#      - mediakraken_vol_mbrainz_conf:/config
#      - mediakraken_vol_mbrainz_data:/data
#    deploy:
#      mode: replicated
#      replicas: 0
#      placement:
#        constraints: [node.role == manager]

  # runs the server to fetch/process all metadata
  metadata:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkmetadata:dev
    secrets:
      - db_password
    entrypoint: ./wait-for-it-ash-busybox130.sh -h mkstack_pgbouncer -p 6432 -t 120 -- python3 main_server_metadata_api.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt
      # stores posters/etc so webserver can present
      - mediakraken_vol_static:/mediakraken/web_app/MediaKraken/static
      # stores the xml/json xref files for anime match
      - mediakraken_vol_cache:/mediakraken/cache
    networks:
      - mediakraken_network_backend
    deploy:
      placement:
        constraints: [node.role == manager]

#  moosefsmaster:
#    image: th-registry-1.beaverbay.local:5000/mediakraken/mkmoosemaster:dev
#    networks:
#      - mediakraken_moosefsnet
#    ports:
#      - "9425:9425"
#    deploy:
#      mode: replicated
#      replicas: 1
#      placement:
#        constraints: [node.role == manager]
#
#  moosefschunkserver:
#    image: th-registry-1.beaverbay.local:5000/mediakraken/mkmoosechunkserver:dev
#    environment:
#      - LABELS=M
#      - SIZE=1
#    networks:
#      - mediakraken_moosefsnet
#    volumes:
#      - ./data/moosehdd0:/mnt/hdd0
#    deploy:
#      mode: global
#      placement:
#        constraints: [node.platform.os == linux]

  # runs the nginx proxy service
  nginx:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mknginx:dev
    entrypoint: /usr/bin/wait-for-it-ash.sh -h mkstack_webapp -p 8080 -t 120 -- nginx
    stop_grace_period: 30s
    stop_signal: SIGTERM
    volumes:
      - mediakraken_vol_nginx:/var/log/mediakraken/nginx
      - mediakraken_vol_certs:/etc/nginx/certs:ro
      - mediakraken_vol_static:/mediakraken/web_app/MediaKraken/static:ro
    ports:
      - "8900:8900"
    networks:
      - mediakraken_network_backend
    deploy:
      placement:
        constraints: [node.role == manager]

  pgadmin:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpgadmin:dev
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - mediakraken_network_backend
    ports:
      - "5050:5050"
    environment:
      PGADMIN_DEFAULT_EMAIL: spootdev@gmail.com
      PGADMIN_DEFAULT_PASSWORD: metaman
    volumes:
      - mediakraken_vol_pgadmin:/data
    deploy:
      mode: replicated
      replicas: 1

  # pgbouncer
  pgbouncer:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpgbouncer:dev
    environment:
      - DB_HOST=mkstack_database
      - POOL_MODE=transaction
      #- POOL_MODE=session   # this might not work in docker swarm
      - MAX_CLIENT_CONN=1024
      - DEFAULT_POOL_SIZE=75
      - SERVER_RESET_QUERY=DISCARD ALL
    secrets:
      - db_password
    entrypoint: ./wait-for-it-ash-busybox130.sh -h mkstack_database -p 5432 -t 120 -- ./entrypoint.sh
    stop_grace_period: 30s
    stop_signal: SIGTERM
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - mediakraken_network_backend

  # pgbouncerhero
  pgbouncerhero:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpgbouncerhero:dev
    environment:
      - PGBOUNCERHERO_DATABASE_URL=postgres://postgres:owfohiwehCHANGEMEjiow2rJ@mkstack_pgbouncer:6432/postgres
      #- PGBOUNCERHERO_DATABASE_URL=postgres://postgres:${DOCKER-SECRET:db_password}@mkstack_pgbouncer:6432/postgres
    secrets:
      - db_password
    ports:
      - "8905:8080"
    stop_grace_period: 30s
    stop_signal: SIGTERM
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - mediakraken_network_backend

#  # pghero
#  pghero:
#    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpghero:dev
#    environment:
#      - DATABASE_URL=postgres://postgres:owfohiwehCHANGEMEjiow2rJ@mkstack_database:5432/postgres
#      #- DATABASE_URL=postgres://postgres:${DOCKER-SECRET:db_password}@mkstack_database:5432/postgres
#    secrets:
#      - db_password
#    ports:
#      - "8910:8080"
#    stop_grace_period: 30s
#    stop_signal: SIGTERM
#    deploy:
#      mode: replicated
#      replicas: 1
#    networks:
#      - mediakraken_network_backend

  # pika
  pika:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpika:dev
    secrets:
      - db_password
    entrypoint: python3 subprogram_pika.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      # for start of SSL server
      - mediakraken_vol_certs:/mediakraken/key:ro
      - ./data/backup:/mediakraken/backup
      - ./mkmount:/mediakraken/mnt
      # so it can start docker containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediakraken_network_backend
    deploy:
      placement:
        constraints: [node.role == manager]

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.portaineragent:9001 --tlsskipverify
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - portaineragent_agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  portaineragent:
    image: portainer/agent
    environment:
      AGENT_CLUSTER_ADDR: tasks.portaineragent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - portaineragent_agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  # rabbit
  rabbitmq:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkrabbitmq:dev
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_IO_THREAD_POOL_SIZE=256
    stop_grace_period: 30s
    stop_signal: SIGTERM
    ports:
      # http management port
      - "15672:15672"
    volumes:
      - mediakraken_vol_rabbit:/var/lib/rabbitmq
    networks:
      - mediakraken_network_backend
    deploy:
      placement:
        constraints: [node.role == manager]

  # Main reactor
  reactor:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkreactor:dev
    secrets:
      - db_password
    entrypoint: ./wait-for-it-ash-busybox130.sh -h mkstack_pgbouncer -p 6432 -t 120 -- python3 subprogram_reactor_line.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    ports:
      - "8903:8903"
    volumes:
      # for start of SSL server
      - mediakraken_vol_certs:/mediakraken/key:ro
      - ./data/backup:/mediakraken/backup
      - ./mkmount:/mediakraken/mnt
      # so it can start docker containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediakraken_network_backend
    deploy:
      placement:
        constraints: [node.role == manager]

  # runs the redis service for flask (account management)
  redis:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkredis:dev
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - mediakraken_network_backend

  # runs roku thumbnail
  rokuthumb:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkrokuthumb:dev
    entrypoint: python3 subprogram_roku_thumbnail_generate.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt
    networks:
      - mediakraken_network_backend
    deploy:
      placement:
        constraints: [node.role == manager]

  teamspeak:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkteamspeak:dev
    ports:
      - "9987:9987/udp"
      - "10011:10011"
      - "30033:30033"
    volumes:
      - mediakraken_vol_teamspeak:/opt/teamspeak
    deploy:
      mode: replicated
      replicas: 0
      placement:
        constraints: [node.role == manager]

  transmission:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mktransmission:dev
    environment:
      - USERNAME=metaman
      - PASSWORD=metaman
    ports:
      - "9091:9091"
      - "51413:51413/tcp"
      - "51413:51413/udp"
    volumes:
      - mediakraken_vol_transmission:/transmission/downloads
      - mediakraken_vol_transmission_incomplete:/transmission/incomplete
    deploy:
      mode: replicated
      replicas: 0
      placement:
        constraints: [node.role == manager]

  # Runs the web service for the main server application
  webapp:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkwebapp:dev
    environment:
      - SWARMIP=${SWARMIP}
      - HOST_IP=${HOST_IP}
    secrets:
      - db_password
      - secure_key
    entrypoint: ./wait-for-it-ash-busybox130.sh -h mkstack_pgbouncer -p 6432 -t 120 -- uwsgi --pcre-jit --gevent 100 --http11-socket :8080 --protocol http --stats :9191 --chdir=./web_app --ini ./web_app/mediakraken_uwsgi_alpine.ini
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    ports:
      - "8901:8080"
      - "9191:9191"
    volumes:
      - ./mkmount:/mediakraken/mnt
      # must not be read only as it stores cache here
      - mediakraken_vol_static:/mediakraken/web_app/MediaKraken/static
      - mediakraken_vol_webkey:/mediakraken/key
      - mediakraken_vol_webpid:/var/run
      - ./data/uploads:/mediakraken/uploads
      # needed to show docker/swarm info
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # hold log files
      - ./data/log:/mediakraken/log
      # this stores the "push button" key
      - mediakraken_vol_phue:/mediakraken/phue
      # server will generate salt/key
      - /var/opt/mediakraken/secure:/mediakraken/secure:ro
    networks:
      - mediakraken_network_backend
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

# Docker private networks
networks:
  # don't bother naming as swarm names as stackname_*
  mediakraken_moosefsnet:
    driver: overlay
  portaineragent_agent_network:
    driver: overlay
    attachable: true
  mediakraken_network_backend:
    driver: overlay
  mediakraken_network_frontend:
    driver: overlay
    attachable: true
  # specifying external is depreciated
  mediakraken_outside:
      name: "mkhost"

volumes:
  portainer_data:
  mediakraken_vol_cache:
  mediakraken_vol_certs:
  mediakraken_vol_devices:
  mediakraken_vol_mbrainz_conf:
  mediakraken_vol_mbrainz_data:
  mediakraken_vol_mumble:
  mediakraken_vol_nginx:
  mediakraken_vol_pgadmin:
  mediakraken_vol_phue:
  mediakraken_vol_portainer:
  mediakraken_vol_postgresql:
  mediakraken_vol_rabbit:
  mediakraken_vol_static:
  mediakraken_vol_teamspeak:
  mediakraken_vol_transmission:
  mediakraken_vol_transmission_incomplete:
  mediakraken_vol_webkey:
  mediakraken_vol_webpid:
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device: $PWD/data/webpid

secrets:
  secure_key:
    external: true
  db_password:
    external: true
#    file: mkstack_db_password.txt
