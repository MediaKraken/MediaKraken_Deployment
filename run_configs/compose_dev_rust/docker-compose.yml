version: '3.6'
# Volumes are HOST directory and then CONTAINER directory

services:
  # start broadcast server (so clients can find server)
  broadcast:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkbroadcast:${BRANCH}
    environment:
      - RUST_BACKTRACE=1
    container_name: mkstack_broadcast
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      # needs socket for running image list
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # needs to run as host so clients can see it on their subnet
    network_mode: host
    restart: unless-stopped

  # runs cron
  cron:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkcron:${BRANCH}
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - RUST_BACKTRACE=1
      - WAIT_HOSTS=pgbouncer:6432, rabbit:5672
    command: sh -c "/wait && /myapp/myapp"
    container_name: mkstack_cron
    depends_on:
      - pgbouncer
      - rabbit
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Postgresql server
  database:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:${BRANCH}
    environment:
      - MAX_CONNECTIONS=125
      - MAX_WAL_SENDERS=10
      - SHARED_BUFFERS=4096MB
      - WORK_MEM=256MB
      - MAX_WORKER_PROCESSES=4
      - MAX_PARALLEL_WORKERS_PER_GATHER=2
      - MAX_PARALLEL_WORKERS=4
      - POSTGRES_PASSWORD=${DBPASS}
    command: postgres -c logging_collector=on -c log_directory='/var/log/postgresql' -c log_filename='postgresql-%Y-%m-%d_%H%M%S.log' -c log_statement='all' -c log_duration=on -c log_connections=off -c log_disconnections=off
    container_name: mkstack_database
    stop_grace_period: 30s
    stop_signal: SIGTERM
    volumes:
      - mediakraken_vol_postgresql:/var/lib/postgresql/data
      - mediakraken_vol_postgresql_backup:/mediakraken/backup
      - mediakraken_vol_postgresql_logging:/var/log/postgresql
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Runs the download services
  download:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdownload:${BRANCH}
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: mkstack_download
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- python3 main_download.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - mediakraken_vol_static:/mediakraken/web_app_sanic/static
    networks:
      - mediakraken_network
    restart: unless-stopped

  filebeat:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkfilebeat:${BRANCH}
    container_name: mkstack_filebeat
    environment:
      - ELASTICSEARCH_HOSTS=th-elk-1:9200
      - KIBANA_HOSTS=th-elk-1:5601
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - mediakraken_vol_postgresql_logging:/var/log/postgresql:ro
      - mediakraken_vol_nginx:/var/log/mediakraken/nginx:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs hardware
  hardware:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkhardware:${BRANCH}
    volumes:
      # TODO why not store this in the db with the device as postgresql crypt
      # this stores the "push button" key
      - mediakraken_vol_phue:/mediakraken/phue
    container_name: mkstack_hardware
    depends_on:
      - rabbit
    entrypoint: python3 main_hardware.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    networks:
      - mediakraken_network
    restart: unless-stopped

  # inotify
  inotify:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkinotify:${BRANCH}
    environment:
      - RUST_BACKTRACE=1
      - WAIT_HOSTS=pgbouncer:6432, rabbit:5672
    command: sh -c "/wait && /myapp/myapp"
    container_name: mkstack_inotify
    depends_on:
      - pgbouncer
      - rabbit
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Container to monitor services running inside other containers
  metricbeat:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkmetricbeat:${BRANCH}
    # https://github.com/docker/swarmkit/issues/1951
    hostname: "{{.Node.Hostname}}-metricbeat"
    networks:
      - mediakraken_network
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - mediakraken_vol_metricbeat:/usr/share/metricbeat/data
    environment:
      - ELASTICSEARCH_HOST=th-elk-1.beaverbay.local
      - KIBANA_HOST=th-elk-1.beaverbay.local
    # disable strict permission checks
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]

#  # Specific container and configuration to monitor the HOST (filesystem, memory, processes,...)
#  metricbeat-host:
#    build:
#      context: ./docker/metricbeat
#      args:
#        - METRICBEAT_FILE=metricbeat-host.yml
#    container_name: metricbeat-metricbeat-host
#    command: -system.hostfs=/hostfs
#    volumes:
#      - /proc:/hostfs/proc:ro
#      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
#      - /:/hostfs:ro
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
#      - "WAIT_FOR_HOSTS=th-elk-1.beaverbay.local:9222 th-elk-1.beaverbay.local:5666"
#      - "HOST_ELASTICSEARCH=th-elk-1.beaverbay.local:9222"
#      - "HOST_KIBANA=th-elk-1.beaverbay.local:5666"
#    extra_hosts:
#      - "elasticsearch:172.17.0.1" # The IP of docker0 interface to access host from container
#      - "kibana:172.17.0.1" # The IP of docker0 interface to access host from container
#    network_mode: host # Mandatory to monitor HOST filesystem, memory, processes,...

  # runs the server to fetch/process all metadata
  metadata:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkmetadata:${BRANCH}
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: mkstack_metadata
    depends_on:
      - database
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h database -p 5432 -t 60 -- python3 main_server_metadata_api.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt
      # stores posters/etc so webserver can present
      - mediakraken_vol_static:/mediakraken/web_app_sanic/static
      # stores the xml/json xref files for anime match
      - mediakraken_vol_cache:/mediakraken/cache
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs the nginx proxy service
  nginx:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mknginx:${BRANCH}
    container_name: mkstack_nginx
    depends_on:
      - webapp
    entrypoint: /usr/bin/wait-for-it-ash-busybox130.sh -h webapp -p 8080 -t 120 -- nginx
    stop_grace_period: 30s
    stop_signal: SIGTERM
    volumes:
      - mediakraken_vol_nginx:/var/log/mediakraken/nginx
      - mediakraken_vol_certs:/etc/nginx/certs:ro
      - mediakraken_vol_static:/mediakraken/web_app_sanic/static:ro
    ports:
      - "8900:8900"
    networks:
      - mediakraken_network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:5.4
    stop_grace_period: 30s
    stop_signal: SIGTERM
    container_name: mkstack_pgadmin
    networks:
      - mediakraken_network
    ports:
      - "5050:5050"
    environment:
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_DEFAULT_EMAIL: spootdev@gmail.com
      PGADMIN_DEFAULT_PASSWORD: metaman
      PGADMIN_DISABLE_POSTFIX: 1
    volumes:
      - mediakraken_vol_pgadmin:/var/lib/pgadmin

  # pgbouncer
  pgbouncer:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpgbouncer:${BRANCH}
    environment:
      - DB_HOST=mkstack_database
      - DB_PASSWORD=${DBPASS}
      - POOL_MODE=session
      - MAX_CLIENT_CONN=1024
      - DEFAULT_POOL_SIZE=85
      - SERVER_RESET_QUERY=DISCARD ALL
    container_name: mkstack_pgbouncer
    depends_on:
      - database
    entrypoint: ./wait-for-it-ash-busybox130.sh -h database -p 5432 -t 60 -- ./entrypoint.sh
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - mediakraken_network
    restart: unless-stopped

  # pika
  pika:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpika:${BRANCH}
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: mkstack_pika
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: python3 subprogram_pika.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      # for start of SSL server
      - mediakraken_vol_certs:/mediakraken/key:ro
      - mediakraken_vol_postgresql_backup:/mediakraken/backup
      - ./mkmount:/mediakraken/mnt
      # so it can start docker containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:2.5.1-alpine
    command: -H unix:///var/run/docker.sock
    container_name: mkstack_portainer
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - portaineragent_agent_network

  # rabbit
  rabbit:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkrabbitmq:${BRANCH}
    container_name: mkstack_rabbitmq
    hostname: mkstack_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_IO_THREAD_POOL_SIZE=256
    stop_grace_period: 30s
    stop_signal: SIGTERM
    ports:
      # https management port
      # - "15671:15671"
      # http management port
      - "15672:15672"
    volumes:
      - mediakraken_vol_rabbit:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - mediakraken_network

  # Main reactor
  reactor:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkreactor:${BRANCH}
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - SECURE=${SECURE}
      - CSRF_SECRET_KEY=${CSRF_SECRET_KEY}
      # will init swarmip on server start, if specified
      - SWARMIP=${SWARMIP}
    container_name: mkstack_reactor
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- python3 main_reactor_line.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    ports:
      - "8903:8903"
    volumes:
      # so can read the device scan output
      - mediakraken_vol_devices:/mediakraken/devices
      # server will generate salt/key
      - /var/opt/mediakraken/secure:/mediakraken/secure
      # for start of SSL server and key generation
      - mediakraken_vol_certs:/mediakraken/key
      # do I need this?  is pika what does the backup?
      - mediakraken_vol_postgresql_backup:/mediakraken/backup
      - ./mkmount:/mediakraken/mnt
      # so it can start docker containers/etc
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  transmission:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mktransmission:${BRANCH}
    environment:
      - USERNAME=metaman
      - PASSWORD=metaman
    container_name: mkstack_transmission
    ports:
      - "9091:9091"
      - "51413:51413/tcp"
      - "51413:51413/udp"
    volumes:
      - mediakraken_vol_transmission:/etc/transmission-daemon
      - mediakraken_vol_transmission_downloads:/transmission/downloads
      - mediakraken_vol_transmission_incomplete:/transmission/incomplete
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs transcode
  transcode:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mktranscode:${BRANCH}
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: mkstack_transcode
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- python3 async_transcode.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Runs the web service for the main server application
  webapp:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkwebappsanic:${BRANCH}
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - SECURE=${SECURE}
      - CSRF_SECRET_KEY=${CSRF_SECRET_KEY}
    container_name: mkstack_webapp
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- gunicorn web_app_sanic.app:app -b :8080 -w 1 -k uvicorn.workers.UvicornWorker
    # uvicorn web_app_async.app:app --host 0.0.0.0 --port 8080 --loop uvloop --http h11
    # gunicorn web_app_async.app:app -b :8080 -w 4 -k uvicorn.workers.UvicornWorker
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    ports:
      - "8080:8080"
    volumes:
      - ./mkmount:/mediakraken/mnt
      # must not be read only as it stores cache here
      - mediakraken_vol_static:/mediakraken/web_app_sanic/static
      - mediakraken_vol_webkey:/mediakraken/key
      - ./data/uploads:/mediakraken/uploads
      # needed to show docker/swarm info
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # hold log files
      - ./data/log:/mediakraken/log
      # this stores the "push button" key
      - mediakraken_vol_phue:/mediakraken/phue
      # server will generate salt/key
      - /var/opt/mediakraken/secure:/mediakraken/secure:ro
      # db backups
      - mediakraken_vol_postgresql_backup:/mediakraken/backup
    networks:
      - mediakraken_network
    restart: unless-stopped

# Docker private networks
networks:
  # Twisted, Database and AMQP communications network
  mediakraken_network:
    driver: bridge
    name: mk_mediakraken_network
  # portainer stuff
  portaineragent_agent_network:
    driver: bridge
    name: mk_portainer_network

volumes:
  portainer_data:
  mediakraken_vol_cache:
  mediakraken_vol_certs:
  mediakraken_vol_devices:
  mediakraken_vol_mbrainz_conf:
  mediakraken_vol_mbrainz_data:
  mediakraken_vol_metricbeat:
  mediakraken_vol_mumble:
  mediakraken_vol_nginx:
  mediakraken_vol_pgadmin:
  mediakraken_vol_phue:
  mediakraken_vol_postgresql:
  mediakraken_vol_postgresql_backup:
  mediakraken_vol_postgresql_logging:
  mediakraken_vol_rabbit:
  mediakraken_vol_static:
  mediakraken_vol_teamspeak:
  mediakraken_vol_transmission:
  mediakraken_vol_transmission_downloads:
  mediakraken_vol_transmission_incomplete:
  mediakraken_vol_webkey:
