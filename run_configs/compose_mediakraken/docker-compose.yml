version: '3.6'
# Volumes are HOST directory and then CONTAINER directory

services:
  # Main app server
  appserver:
    image: mediakraken/mkserver:latest
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - SECURE=${SECURE}
      - CSRF_SECRET_KEY=${CSRF_SECRET_KEY}
      # will init swarmip on server start, if specified
      - SWARMIP=${SWARMIP}
      - DEBUG=${DEBUG}
    container_name: mkstack_server
    depends_on:
      - pgbouncer
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- python3 main_server.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      # server will generate ssl key for use by web/nginx
      - mediakraken_vol_certs:/mediakraken/key
      # if swarmip init
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # so can read the device scan output
      - mediakraken_vol_devices:/mediakraken/devices
      # server will generate salt/key
      - /var/opt/mediakraken/secure:/mediakraken/secure
    networks:
      - mediakraken_network

  # start broadcast server (so clients can find server)
  broadcast:
    image: mediakraken/mkbroadcast:latest
    environment:
      # so it knows what ip to broadcast on
      - SWARMIP=${SWARMIP}
      - HOST_IP=${HOST_IP}
    container_name: mkstack_broadcast
    entrypoint: python3 subprogram_broadcast.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    ports:
      - "9101:9101"
    volumes:
      # needs socket for running image list
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # needs to run as host so clients can see it on their subnet
    network_mode: host
    restart: unless-stopped

  # runs cron
  cron:
    image: mediakraken/mkcron:latest
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkstack_cron
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- python3 subprogram_cron_checker.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Postgresql server
  database:
    image: mediakraken/mkdatabase:latest
    environment:
      - MAX_CONNECTIONS=125
      - MAX_WAL_SENDERS=10
      - SHARED_BUFFERS=4096MB
      - WORK_MEM=256MB
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: mkstack_database
    stop_grace_period: 30s
    stop_signal: SIGTERM
    volumes:
      - mediakraken_vol_postgresql:/var/lib/postgresql/data
      - mediakraken_vol_postgresql_backup:/mediakraken/backup
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Runs the download services
  download:
    image: mediakraken/mkdownload:latest
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkstack_download
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- python3 main_download.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./data/download:/mediakraken/download
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs ffprobe
  ffprobe:
    image: mediakraken/mkffprobe:latest
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkstack_ffprobe
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- python3 subprogram_ffprobe_metadata.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs hardware
  hardware:
    image: mediakraken/mkhardware:latest
    environment:
      - DEBUG=${DEBUG}
    volumes:
      # this stores the "push button" key
      - mediakraken_vol_phue:/mediakraken/phue
    container_name: mkstack_hardware
    depends_on:
      - rabbit
    entrypoint: python3 main_hardware.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs the server to fetch/process all metadata
  metadata:
    image: mediakraken/mkmetadata:latest
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkstack_metadata
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- python3 main_server_metadata_api.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt
      # stores posters/etc so webserver can present
      - mediakraken_vol_static:/mediakraken/web_app_sanic/MediaKraken/static
      # stores the xml/json xref files for anime match
      - mediakraken_vol_cache:/mediakraken/cache
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs the nginx proxy service
  nginx:
    image: mediakraken/mknginx:latest
    container_name: mkstack_nginx
    depends_on:
      - webapp
    entrypoint: /usr/bin/wait-for-it-ash-busybox130.sh -h webapp -p 8080 -t 60 -- nginx
    stop_grace_period: 30s
    stop_signal: SIGTERM
    volumes:
      - mediakraken_vol_nginx:/var/log/mediakraken/nginx
      - mediakraken_vol_certs:/etc/nginx/certs:ro
      - mediakraken_vol_static:/mediakraken/web_app_sanic/MediaKraken/static:ro
#      - mediakraken_vol_webpid:/var/run:ro
    ports:
      - "8900:8900"
    networks:
      - mediakraken_network
    restart: unless-stopped

  # pgbouncer
  pgbouncer:
    image: mediakraken/mkpgbouncer:latest
    environment:
      - DB_HOST=mkstack_database
      - DB_PASSWORD=${DBPASS}
      - POOL_MODE=session
      - MAX_CLIENT_CONN=1024
      - DEFAULT_POOL_SIZE=85
      - SERVER_RESET_QUERY=DISCARD ALL
    container_name: mkstack_pgbouncer
    depends_on:
      - database
    entrypoint: ./wait-for-it-ash-busybox130.sh -h database -p 5432 -t 30 -- ./entrypoint.sh
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - mediakraken_network
    restart: unless-stopped

  # pika
  pika:
    image: mediakraken/mkpika:latest
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkstack_pika
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: python3 subprogram_pika.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      # for start of SSL server
      - mediakraken_vol_certs:/mediakraken/key:ro
      - ./data/backup:/mediakraken/backup
      - ./mkmount:/mediakraken/mnt
      # so it can start docker containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  portainer:
    image: portainer/portainer
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - portaineragent_agent_network

  # rabbit
  rabbit:
    image: mediakraken/mkrabbitmq:latest
    container_name: mkstack_rabbitmq
    hostname: mkstack_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_IO_THREAD_POOL_SIZE=256
    stop_grace_period: 30s
    stop_signal: SIGTERM
    ports:
      # https management port
      # - "15671:15671"
      # http management port
      - "15672:15672"
    volumes:
      - mediakraken_vol_rabbit:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - mediakraken_network

  # Main reactor
  reactor:
    image: mediakraken/mkreactor:latest
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkstack_reactor
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- python3 subprogram_reactor_line.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    ports:
      - "8903:8903"
    volumes:
      # for start of SSL server
      - mediakraken_vol_certs:/mediakraken/key:ro
      - ./data/backup:/mediakraken/backup
      - ./mkmount:/mediakraken/mnt
      # so it can start docker containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs roku thumbnail
  rokuthumb:
    image: mediakraken/mkrokuthumb:latest
    environment:
      - DEBUG=${DEBUG}
    container_name: mkstack_rokuthumb
    depends_on:
      - rabbit
    entrypoint: python3 subprogram_roku_thumbnail_generate.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Runs the web service for the main server application
  webapp:
    image: mediakraken/mkwebappsanic:latest
    environment:
      - POSTGRES_PASSWORD=${DBPASS}
      - SECURE=${SECURE}
      - DEBUG=${DEBUG}
      - SWARMIP=${SWARMIP}
      - HOST_IP=${HOST_IP}
    container_name: mkstack_webapp
    depends_on:
      - pgbouncer
      - rabbit
    entrypoint: ./wait-for-it-ash-busybox130.sh -h pgbouncer -p 6432 -t 60 -- gunicorn web_app_sanic.app:app -b :8080 -w 1 -k uvicorn.workers.UvicornWorker
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt
      # must not be read only as it stores cache here
      - mediakraken_vol_static:/mediakraken/web_app_sanic/MediaKraken/static
      - mediakraken_vol_webkey:/mediakraken/key
      - mediakraken_vol_webpid:/var/run
      - ./data/uploads:/mediakraken/uploads
      # needed to show docker/swarm info
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # hold log files
      - ./data/log:/mediakraken/log
      # this stores the "push button" key
      - mediakraken_vol_phue:/mediakraken/phue
      # server will generate salt/key
      - /var/opt/mediakraken/secure:/mediakraken/secure:ro
      # db backups
      - mediakraken_vol_postgresql_backup:/mediakraken/backup:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

# Docker private networks
networks:
  # Twisted, Database and AMQP communications network
  mediakraken_network:
    driver: bridge
    name: mk_mediakraken_network
  # portainer stuff
  portaineragent_agent_network:
    driver: bridge
    name: mk_portainer_network

volumes:
  portainer_data:
  mediakraken_vol_cache:
  mediakraken_vol_certs:
  mediakraken_vol_devices:
  mediakraken_vol_mbrainz_conf:
  mediakraken_vol_mbrainz_data:
  mediakraken_vol_mumble:
  mediakraken_vol_nginx:
  mediakraken_vol_pgadmin:
  mediakraken_vol_phue:
  mediakraken_vol_portainer:
  mediakraken_vol_postgresql:
  mediakraken_vol_postgresql_backup:
  mediakraken_vol_rabbit:
  mediakraken_vol_static:
  mediakraken_vol_teamspeak:
  mediakraken_vol_transmission:
  mediakraken_vol_transmission_incomplete:
  mediakraken_vol_webkey:
  mediakraken_vol_webpid:
