version: '3.5'
# MediaKraken

# Volumes are HOST directory and then CONTAINER directory

services:
  # Main app server
  appserver:
    image: mediakraken/mkserver:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - SECURE=${SECURE}
      # will init swarmip on server start, if specified
      - SWARMIP=${SWARMIP}
      - DEBUG=${DEBUG}
    container_name: mkserver
    depends_on:
      - pgbounce
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 main_server.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      # server will generate ssl key for use by web/nginx
      - mediakraken_vol_certs:/mediakraken/key
      # if swarmip init
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # so can read the device scan output
      - mediakraken_vol_devices:/mediakraken/devices
      # server will generate salt/key
      - /var/opt/mediakraken/secure:/mediakraken/secure
    networks:
      - mediakraken_network

  # start broadcast server (so clients can find server)
  broadcast:
    image: mediakraken/mkbroadcast:latest
    environment:
      # so it knows what ip to broadcast on
      - SWARMIP=${SWARMIP}
      - HOST_IP=${HOST_IP}
    container_name: mkbroadcast
    entrypoint: python3 subprogram_broadcast.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    ports:
      - "9101:9101"
    volumes:
      # needs socket for running image list
      - /var/run/docker.sock:/var/run/docker.sock:ro
    # needs to run as host so clients can see it on their subnet
    network_mode: host
    restart: unless-stopped

  # runs cron
  cron:
    image: mediakraken/mkcron:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkcron
    depends_on:
      - pgbounce
      - rabbit
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 subprogram_cron_checker.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Postgresql server
  database:
    image: mediakraken/mkdatabase:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: mkdatabase
    stop_grace_period: 30s
    stop_signal: SIGTERM
    expose:
      - "5432"
    volumes:
      - mediakraken_vol_postgresql:/var/lib/postgresql
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Runs the download services
  download:
    image: mediakraken/mkdownload:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkdownload
    depends_on:
      - pgbounce
      - rabbit
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 main_download.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./data/download:/mediakraken/download
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs ffprobe
  ffprobe:
    image: mediakraken/mkffprobe:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkffprobe
    depends_on:
      - pgbounce
      - rabbit
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 subprogram_ffprobe_metadata.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs hardware
  hardware:
    image: mediakraken/mkhardware:latest
    environment:
      - DEBUG=${DEBUG}
    container_name: mkhardware
    depends_on:
      - rabbit
    entrypoint: python3 main_hardware.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      # this stores the "push button" key
      - mediakraken_vol_phue:/mediakraken/phue
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs the server to fetch/process all metadata
  metadata:
    image: mediakraken/mkmetadata:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkmetadata
    depends_on:
      - pgbounce
      - rabbit
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 main_server_metadata_api.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt
      # stores posters/etc so webserver can present
      - mediakraken_vol_static:/mediakraken/web_app/MediaKraken/static
      # stores the xml/json xref files for anime match
      - mediakraken_vol_cache:/mediakraken/cache
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs the nginx proxy service
  nginx:
    image: mediakraken/mknginx:latest
    container_name: mknginx
    depends_on:
      - webserver
    entrypoint: /usr/bin/wait-for-it-ash.sh -h webserver -p 8080 -t 30 -- nginx
    stop_grace_period: 30s
    stop_signal: SIGTERM
    volumes:
      - mediakraken_vol_nginx:/var/log/mediakraken/nginx
      - mediakraken_vol_certs:/etc/nginx/certs:ro
      - mediakraken_vol_static:/mediakraken/web_app/MediaKraken/static:ro
    ports:
      - "8900:8900"
    networks:
      - mediakraken_network
    restart: unless-stopped

  # pika
  pika:
    image: mediakraken/mkpika:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkpika
    depends_on:
      - pgbounce
      - rabbit
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 subprogram_pika.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    expose:
      - "5672"
    volumes:
      # for start of SSL server
      - mediakraken_vol_certs:/mediakraken/key:ro
      - ./data/backup:/mediakraken/backup
      - ./mkmount:/mediakraken/mnt
      # so it can start docker containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  # pgbouncer
  pgbouncer:
    image: mediakraken/mkpgbouncer:latest
    environment:
      - DB_HOST=mkdatabase
      - DB_USER=${DBUSER}
      - DB_PASSWORD=${DBPASS}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=500
      - DEFAULT_POOL_SIZE=85
      - SERVER_RESET_QUERY=DISCARD ALL
    container_name: mkpgbouncer
    depends_on:
      - database
    entrypoint: ./wait-for-it-ash.sh -h database -p 5432 -t 30 -- ./entrypoint.sh
    stop_grace_period: 30s
    stop_signal: SIGTERM
    expose:
      - "6432"
    networks:
      - mediakraken_network
    restart: unless-stopped

  # rabbit
  rabbit:
    image: mediakraken/mkrabbitmq:latest
    hostname: mkrabbitmq
    container_name: mkrabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    stop_grace_period: 30s
    stop_signal: SIGTERM
    expose:
      - "5672"
    volumes:
      - mediakraken_vol_rabbit:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - mediakraken_network

  # Main reactor
  reactor:
    image: mediakraken/mkreactor:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkreactor
    depends_on:
      - pgbounce
      - rabbit
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 subprogram_reactor_line.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    ports:
      - "8903:8903"
    volumes:
      # for start of SSL server
      - mediakraken_vol_certs:/mediakraken/key:ro
      - ./data/backup:/mediakraken/backup
      - ./mkmount:/mediakraken/mnt
      # so it can start docker containers
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs the redis service for flask
  redis:
    image: mediakraken/mkredis:latest
    container_name: mkredis
    stop_grace_period: 30s
    stop_signal: SIGTERM
    expose:
      - "6379"
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs roku thumbnail
  rokuthumb:
    image: mediakraken/mkrokuthumb:latest
    environment:
      - DEBUG=${DEBUG}
    container_name: mkrokuthumb
    depends_on:
      - rabbit
    entrypoint: python3 subprogram_roku_thumbnail_generate.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    volumes:
      - ./mkmount:/mediakraken/mnt
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Runs the web service for the main server application
  webserver:
    image: mediakraken/mkwebapp:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - SECURE=${SECURE}
      - DEBUG=${DEBUG}
      - SWARMIP=${SWARMIP}
      - HOST_IP=${HOST_IP}
    container_name: mkwebapp
    depends_on:
      - pgbounce
      - rabbit
      - redis
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- uwsgi --disable-logging --socket 0.0.0.0:8080 --protocol http --chdir=./web_app --ini ./web_app/mediakraken_uwsgi_alpine.ini
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    expose:
      - "8080"
    volumes:
      - ./mkmount:/mediakraken/mnt
      # must not be read only as it stores cache here
      - mediakraken_vol_static:/mediakraken/web_app/MediaKraken/static
      - mediakraken_vol_webkey:/mediakraken/key
      - ./data/uploads:/mediakraken/uploads
      # needed to show docker/swarm info
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # hold log files
      - ./data/log:/mediakraken/log
      # this stores the "push button" key
      - mediakraken_vol_phue:/mediakraken/phue
      # server will generate salt/key
      - /var/opt/mediakraken/secure:/mediakraken/secure:ro
    networks:
      - mediakraken_network
    restart: unless-stopped

# Docker private networks
networks:
  # Twisted, Database and AMQP communications network
  mediakraken_network:
    driver: bridge
    name: mk_mediakraken_network

volumes:
    mediakraken_vol_cache:
      name: mediakraken_vol_cache
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/cache
    mediakraken_vol_certs:
      name: mediakraken_vol_certs
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/certs
    mediakraken_vol_devices:
      name: mediakraken_vol_devices
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/devices
    mediakraken_vol_mumble:
      name: mediakraken_vol_mumble
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/mumble
    mediakraken_vol_nginx:
      name: mediakraken_vol_nginx
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/nginx
    mediakraken_vol_phue:
      name: mediakraken_vol_phue
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/phue
    mediakraken_vol_postgresql:
      name: mediakraken_vol_postgresql
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/postgresql
    mediakraken_vol_rabbit:
      name: mediakraken_vol_rabbit
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/rabbit
    mediakraken_vol_static:
      name: mediakraken_vol_static
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/static
    mediakraken_vol_teamspeak:
      name: mediakraken_vol_teamspeak
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/teamspeak
    mediakraken_vol_webkey:
      name: mediakraken_vol_webkey
      driver: local
      driver_opts:
        type: none
        o: bind
        device: $PWD/data/webkey
