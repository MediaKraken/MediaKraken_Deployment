version: '3'
# MediaKraken

# Volumes are HOST directory and then CONTAINER directory

services:
  # Main app server
  appserver:
    image: th-dockerhub-1:5000/mediakraken/mkserver:latest
    environment:
      - POSTGRES_DB_HOST=${DBHOST}
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      # will init swarmip on server start, if specified
      - SWARMIP=${SWARMIP}
      - DEBUG=${DEBUG}
    container_name: mkserver
    depends_on:
      - pgbounce
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 main_server.py
    volumes:
      # server will generate ssl key for use by web/nginx
      - ./data/certs:/mediakraken/key
      # if swarmip init
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mediakraken_network

  # start broadcast server (so clients can find server)
  broadcast:
    image: th-dockerhub-1:5000/mediakraken/mkbroadcast:latest
    container_name: mkbroadcast
    entrypoint: python3 subprogram_broadcast.py
    ports:
      - "9101:9101"
    volumes:
      # needs socket for running image list
      - /var/run/docker.sock:/var/run/docker.sock
    # needs to run as host so clients can see it on their subnet
    network_mode: host
    restart: unless-stopped

  # runs cron
  cron:
    image: th-dockerhub-1:5000/mediakraken/mkcron:latest
    environment:
      - POSTGRES_DB_HOST=${DBHOST}
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkcron
    depends_on:
      - rabbit
    entrypoint: python3 subprogram_cron_checker.py
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Postgresql server
  database:
    image: th-dockerhub-1:5000/mediakraken/mkdatabase:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: mkdatabase
    volumes:
      - ./data/postgresql:/var/lib/postgresql
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Runs the download services
  download:
    image: th-dockerhub-1:5000/mediakraken/mkdownload:latest
    container_name: mkdownload
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
    depends_on:
      - rabbit
    entrypoint: python3 main_download.py
    volumes:
      - ./data/download:/mediakraken/download
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs ffprobe
  ffprobe:
    image: th-dockerhub-1:5000/mediakraken/mkffprobe:latest
    environment:
      - POSTGRES_DB_HOST=${DBHOST}
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkffprobe
    depends_on:
      - rabbit
    entrypoint: python3 subprogram_ffprobe_metadata.py
    volumes:
      - ./data/directories:/mediakraken/mnt
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs hardware
  hardware:
    image: th-dockerhub-1:5000/mediakraken/mkhardware:latest
    environment:
      - DEBUG=${DEBUG}
    container_name: mkhardware
    depends_on:
      - rabbit
    entrypoint: python3 main_hardware.py
    volumes:
      # this stores the "push button" key
      - ./data/phue:/mediakraken/phue
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs the server to fetch/process all metadata
  metadata:
    image: th-dockerhub-1:5000/mediakraken/mkmetadata:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkmetadata
    depends_on:
      - pgbounce
      - rabbit
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- python3 main_server_metadata_api.py
    volumes:
      - ./data/directories:/mediakraken/mnt
      # stores posters/etc so webserver can present
      - static-volume:/mediakraken/web_app/MediaKraken/static
      # stores the xml/json xref files for anime match
      - ./data/cache:/mediakraken/cache
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs the nginx proxy service
  nginx:
    image: th-dockerhub-1:5000/mediakraken/mknginx:latest
    container_name: mknginx
    entrypoint: /usr/bin/wait-for-it-ash.sh -h webserver -p 8080 -t 30 -- nginx
    volumes:
      - ./data/nginx:/var/log/mediakraken/nginx
      - ./data/certs:/etc/nginx/certs
      - static-volume:/mediakraken/web_app/MediaKraken/static
    ports:
      - "8900:8900"
    networks:
      - mediakraken_network
    restart: unless-stopped

  # pgbouncer
  pgbounce:
    image: th-dockerhub-1:5000/mediakraken/mkpgbounce:latest
    environment:
      - DB_HOST=${DBHOST}
      - DB_USER=${DBUSER}
      - DB_PASSWORD=${DBPASS}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=500
      - DEFAULT_POOL_SIZE=85
      - SERVER_RESET_QUERY=DISCARD ALL
    container_name: mkpgbounce
    depends_on:
      - database
    entrypoint: ./wait-for-it-ash.sh -h database -p 5432 -t 30 -- ./entrypoint.sh
    networks:
      - mediakraken_network
    restart: unless-stopped

  # rabbit
  rabbit:
    image: th-dockerhub-1:5000/mediakraken/mkrabbitmq:latest
    container_name: mkrabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
    volumes:
      - ./data/rabbit:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - mediakraken_network

  # Main reactor
  reactor:
    image: th-dockerhub-1:5000/mediakraken/mkreactor:latest
    environment:
      - POSTGRES_DB_HOST=${DBHOST}
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkreactor
    depends_on:
      - pgbounce
      - rabbit
    entrypoint: python3 subprogram_reactor_line.py
    ports:
      - "8903:8903"
    volumes:
      # for start of SSL server
      - ./data/certs:/mediakraken/key
      - ./data/backup:/mediakraken/backup
      - ./data/directories:/mediakraken/mnt
      # so it can start docker containers
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs the redis service for flask
  redis:
    image: th-dockerhub-1:5000/mediakraken/mkredis:latest
    container_name: mkredis
    ports:
      - "6379:6379"
    networks:
      - mediakraken_network
    restart: unless-stopped

  # runs roku thumbnai
  rokuthumb:
    image:  th-dockerhub-1:5000/mediakraken/mkrokuthumb:latest
    environment:
      - DEBUG=${DEBUG}
    container_name: mkrokuthumb
    depends_on:
      - rabbit
    entrypoint: python3 subprogram_roku_thumbnail_generate.py
    volumes:
      - ./data/directories:/mediakraken/mnt
    networks:
      - mediakraken_network
    restart: unless-stopped

  # Runs the web service for the main server application
  webserver:
    image: th-dockerhub-1:5000/mediakraken/mkwebapp:latest
    environment:
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
      - DEBUG=${DEBUG}
    container_name: mkwebapp
    depends_on:
      - pgbounce
      - rabbit
      - redis
      - nginx
    entrypoint: ./wait-for-it-ash.sh -h pgbounce -p 6432 -t 30 -- uwsgi --socket 0.0.0.0:8080 --protocol http --chdir=./web_app --ini ./web_app/mediakraken_uwsgi_alpine.ini
    volumes:
      - ./data/directories:/mediakraken/mnt
      - static-volume:/mediakraken/web_app/MediaKraken/static
      - ./data/webkey:/mediakraken/key
      - ./data/uploads:/mediakraken/uploads
      # needed to show docker/swarm info
      - /var/run/docker.sock:/var/run/docker.sock
      # hold log files
      - ./data/log:/mediakraken/log
    networks:
      - mediakraken_network
    restart: unless-stopped

# Docker private networks
networks:
  # Twisted, Database and AMQP communications network
  mediakraken_network:
    driver: bridge

volumes:
     static-volume:
