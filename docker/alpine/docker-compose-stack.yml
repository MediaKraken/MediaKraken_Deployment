
  # Postgresql server
  database:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:dev
    environment:
      - PGHOST=/tmp
      - MAX_CONNECTIONS=20
      - MAX_WAL_SENDERS=10
      - PG_MODE=primary
      - PG_PRIMARY_USER=${DBUSER}
      - PG_PRIMARY_PASSWORD=${DBPASS}
      - PG_ROOT_PASSWORD=${DBPASS}
      - PG_PRIMARY_PORT=5432
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: mkdatabase
    stop_grace_period: 30s
    stop_signal: SIGTERM
    volumes:
      - mediakraken_vol_postgresql:/var/lib/postgresql
    networks:
      - mediakraken_network
    restart: unless-stopped
    deploy:
      placement:
        constraints:
        - node.labels.type == primary
        - node.role == worker

  # Postgresql server replica
  database-replica:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:dev
    environment:
      - PGHOST=/tmp
      - MAX_CONNECTIONS=20
      - MAX_WAL_SENDERS=10
      - PG_MODE=replica
      - PG_PRIMARY_HOST=database
      - PG_PRIMARY_PORT=5432
      - PG_PRIMARY_USER=${DBUSER}
      - PG_PRIMARY_PASSWORD=${DBPASS}
      - PG_ROOT_PASSWORD=${DBPASS}
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
    container_name: mkdatabasereplica
    stop_grace_period: 30s
    stop_signal: SIGTERM
    volumes:
      - mediakraken_vol_postgresql_replica:/var/lib/postgresql
    networks:
      - mediakraken_network
    restart: unless-stopped
    deploy:
      placement:
        constraints:
        - node.labels.type != primary
        - node.role == worker

  hapgbouncerproxy:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkhaproxy:dev
    container_name: mkpghaproxy
    depends_on:
      - pgbouncer
      - pgbouncerha
    environment:
      - BALANCE=leastconn
      # Used to identify services.
      - ADDITIONAL_SERVICES=project_dir:pgbouncer
    volumes:
      # find what's running and where
      - /var/run/docker.sock:/var/run/docker.sock:ro
    expose:
      - "7432"
    networks:
      - mediakraken_network
    deploy:
      placement:
        constraints: [node.role == manager]

  # pgbouncer
  pgbouncer:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpgbouncer:dev
    environment:
      - DB_HOST=mkdatabase
      - DB_USER=${DBUSER}
      - DB_PASSWORD=${DBPASS}
      - POOL_MODE=session
      - MAX_CLIENT_CONN=500
      - DEFAULT_POOL_SIZE=85
      - SERVER_RESET_QUERY=DISCARD ALL
    container_name: mkpgbouncer
    depends_on:
      - database
    entrypoint: ./wait-for-it-ash.sh -h database -p 5432 -t 30 -- ./entrypoint.sh
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - mediakraken_network
    restart: unless-stopped

  # pgbouncer
  pgbouncerha:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpgbouncer:dev
    environment:
      - DB_HOST=mkdatabase
      - DB_USER=${DBUSER}
      - DB_PASSWORD=${DBPASS}
      - POOL_MODE=session
      - MAX_CLIENT_CONN=500
      - DEFAULT_POOL_SIZE=85
      - SERVER_RESET_QUERY=DISCARD ALL
    container_name: mkpgbouncerha
    depends_on:
      - database
    entrypoint: ./wait-for-it-ash.sh -h database -p 5432 -t 30 -- ./entrypoint.sh
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - mediakraken_network
    restart: unless-stopped
