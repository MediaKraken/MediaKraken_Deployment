version: '3.5'

services:
  reverse-proxy:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mktraefik:dev
    command: --api --docker # Enables the web UI and tells Traefik to listen to docker
    ports:
      - "80:80"     # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # So that Traefik can listen to the Docker events
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - mediakraken_network_frontend

#  whoami:
#    image: containous/whoami # A container that exposes an API to show its IP address
#    labels:
#      - "traefik.frontend.rule=Host:whoami.docker.localhost"

  logspout:
    image: bekt/logspout-logstash
#    image: th-registry-1.beaverbay.local:5000/mediakraken/mklogspout:dev
    environment:
      ROUTE_URIS: 'logstash+tcp://th-jenkins-1.beaverbay.local:5000'
      LOGSTASH_FIELDS: 'environment=production'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
        mode: global

  # pgbouncer
  pgbouncer:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpgbouncer:dev
    environment:
      - DB_HOST=database
      - DB_USER=${DBUSER}
      - DB_PASSWORD=${DBPASS}
      - POOL_MODE=session
      - MAX_CLIENT_CONN=1024
      - DEFAULT_POOL_SIZE=85
      - SERVER_RESET_QUERY=DISCARD ALL
    entrypoint: ./wait-for-it-ash.sh -h database -p 5432 -t 30 -- ./entrypoint.sh
    stop_grace_period: 30s
    stop_signal: SIGTERM
    labels:
      - "traefik.frontend.rule=Host:pgbouncer.docker.localhost"
    deploy:
      mode: replicated
      replicas: 2
    env_file: .env
    networks:
      - mediakraken_network_backend

  # Postgresql server
  database:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:dev
    environment:
      - MAX_CONNECTIONS=20
      - MAX_WAL_SENDERS=10
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
    stop_grace_period: 30s
    stop_signal: SIGTERM
    deploy:
      placement:
        constraints: [node.role == manager]
    env_file: .env
    volumes:
      - mediakraken_vol_postgresql:/var/lib/postgresql
    networks:
      - mediakraken_network_backend

  # runs hardware
  hardware:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkhardware:dev
    environment:
      - DEBUG=${DEBUG}
    volumes:
      # this stores the "push button" key
      - mediakraken_vol_phue:/mediakraken/phue
    entrypoint: python3 main_hardware.py
    stop_grace_period: 30s
    stop_signal: SIGUSR1
    networks:
      - mediakraken_network_backend

#  # Postgresql server
#  database:
#    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:dev
#    environment:
#      - PGHOST=/tmp
#      - MAX_CONNECTIONS=20
#      - MAX_WAL_SENDERS=10
#      - PG_MODE=primary
#      - PG_PRIMARY_USER=${DBUSER}
#      - PG_PRIMARY_PASSWORD=${DBPASS}
#      - PG_ROOT_PASSWORD=${DBPASS}
#      - PG_PRIMARY_PORT=5432
#      - POSTGRES_DB=${DBDATABASE}
#      - POSTGRES_USER=${DBUSER}
#      - POSTGRES_PASSWORD=${DBPASS}
#    stop_grace_period: 30s
#    stop_signal: SIGTERM
#    networks:
#      - mediakraken_network_backend
#    deploy:
#      placement:
#        constraints:
#        - node.labels.type == primary
#        - node.role == worker
#
#  # Postgresql server replica
#  database-replica:
#    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:dev
#    environment:
#      - PGHOST=/tmp
#      - MAX_CONNECTIONS=20
#      - MAX_WAL_SENDERS=10
#      - PG_MODE=replica
#      - PG_PRIMARY_HOST=database
#      - PG_PRIMARY_PORT=5432
#      - PG_PRIMARY_USER=${DBUSER}
#      - PG_PRIMARY_PASSWORD=${DBPASS}
#      - PG_ROOT_PASSWORD=${DBPASS}
#      - POSTGRES_DB=${DBDATABASE}
#      - POSTGRES_USER=${DBUSER}
#      - POSTGRES_PASSWORD=${DBPASS}
#    stop_grace_period: 30s
#    stop_signal: SIGTERM
#    networks:
#      - mediakraken_network_backend
#    deploy:
#      placement:
#        constraints:
#        - node.labels.type != primary
#        - node.role == worker

  portaineragent:
    image: portainer/agent
    environment:
      AGENT_CLUSTER_ADDR: tasks.portaineragent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - portaineragent_agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.portaineragent:9001 --tlsskipverify
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
#      - mediakraken_vol_portainer:/data
    networks:
      - portaineragent_agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # rabbit
  rabbitmq:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkrabbitmq:dev
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    stop_grace_period: 30s
    stop_signal: SIGTERM
    ports:
      # https management port
      - "15671:15671"
      # http management port
      - "15672:15672"
    volumes:
      - mediakraken_vol_rabbit:/var/lib/rabbitmq
    networks:
      # TODO do NOT post one below.....breaks portainer
      # - portaineragent_agent_network
      - mediakraken_network_backend
      - mediakraken_network_frontend
    deploy:
      placement:
        constraints: [node.role == manager]

  # runs the redis service for flask (account management)
  redis:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkredis:dev
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - mediakraken_network_backend
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

# Docker private networks
networks:
  # don't bother naming as swarm names as stackname_*
  portaineragent_agent_network:
    driver: overlay
    attachable: true
  mediakraken_network_backend:
    driver: overlay
  mediakraken_network_frontend:
    driver: overlay
    attachable: true

volumes:
  portainer_data:
  mediakraken_vol_cache:
    name: mediakraken_vol_cache
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/cache
  mediakraken_vol_certs:
    name: mediakraken_vol_certs
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/certs
  mediakraken_vol_devices:
    name: mediakraken_vol_devices
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/devices
  mediakraken_vol_mumble:
    name: mediakraken_vol_mumble
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/mumble
  mediakraken_vol_nginx:
    name: mediakraken_vol_nginx
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/nginx
  mediakraken_vol_phue:
    name: mediakraken_vol_phue
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/phue
  mediakraken_vol_portainer:
    name: mediakraken_vol_portainer
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/portainer
  mediakraken_vol_postgresql:
    name: mediakraken_vol_postgresql
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/postgresql
  mediakraken_vol_rabbit:
    name: mediakraken_vol_rabbit
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/rabbit
  mediakraken_vol_static:
    name: mediakraken_vol_static
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/static
  mediakraken_vol_teamspeak:
    name: mediakraken_vol_teamspeak
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/teamspeak
  mediakraken_vol_webkey:
    name: mediakraken_vol_webkey
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/webkey
  mediakraken_vol_webpid:
    name: mediakraken_vol_webpid
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $PWD/data/webpid
