version: '3.5'

services:
  reverse-proxy:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mktraefik:dev
    command: --api --docker # Enables the web UI and tells Traefik to listen to docker
    ports:
      - "80:80"     # The HTTP port
      - "8080:8080" # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # So that Traefik can listen to the Docker events
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - mediakraken_network_frontend

  whoami:
    image: containous/whoami # A container that exposes an API to show its IP address
    labels:
      - "traefik.frontend.rule=Host:whoami.docker.localhost"

  logspout:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mklogspout:dev
    environment:
      ROUTE_URIS: 'udp://th-jenkins-1.beaverbay.local:5044'
      LOGSTASH_FIELDS: 'environment=production'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
        mode: global

  # pgbouncer
  pgbouncer:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkpgbouncer:dev
    environment:
      - DB_HOST=mkdatabase
      - DB_USER=${DBUSER}
      - DB_PASSWORD=${DBPASS}
      - POOL_MODE=session
      - MAX_CLIENT_CONN=1024
      - DEFAULT_POOL_SIZE=85
      - SERVER_RESET_QUERY=DISCARD ALL
    # ignored in swarm start
    depends_on:
      - database
    entrypoint: ./wait-for-it-ash.sh -h database -p 5432 -t 30 -- ./entrypoint.sh
    stop_grace_period: 30s
    stop_signal: SIGTERM
#    labels:
#      - "traefik.frontend.rule=Host:pgbouncer.docker.localhost"
    deploy:
      mode: replicated
      replicas: 2
    env_file: .env
    networks:
      - mediakraken_network_backend

  # Postgresql server
  database:
    image: th-registry-1.beaverbay.local:5000/mediakraken/mkdatabase:dev
    environment:
      - MAX_CONNECTIONS=20
      - MAX_WAL_SENDERS=10
      - POSTGRES_DB=${DBDATABASE}
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASS}
    stop_grace_period: 30s
    stop_signal: SIGTERM
    deploy:
      placement:
        constraints: [node.role == manager]
    env_file: .env
    networks:
      - mediakraken_network_backend

  agent:
    image: portainer/agent
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: tasks.agent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

volumes:
  portainer_data:

# Docker private networks
networks:
  agent_network:
    driver: overlay
    attachable: true
  mediakraken_network_backend:
    driver: overlay
    name: mk_mediakraken_network_backend
  mediakraken_network_frontend:
    driver: overlay
    name: mk_mediakraken_network_frontend
